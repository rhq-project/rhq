<?xml version="1.0"?>
<!--
  ~ RHQ Management Platform
  ~ Copyright (C) 2005-2014 Red Hat, Inc.
  ~ All rights reserved.
  ~
  ~ This program is free software; you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation version 2 of the License.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  ~ GNU General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program; if not, write to the Free Software Foundation, Inc.,
  ~ 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA
  -->

<differences>

  <difference>
    <className>org/rhq/enterprise/server/content/ContentManagerRemote</className>
    <differenceType>7012</differenceType>  <!-- method added to an interface -->
    <method>java.lang.String createTemporaryContentHandle()</method>
    <justification>Adding a method to a remote API interface is safe. This is newly implemented functionality.</justification>
  </difference>

  <difference>
    <className>org/rhq/enterprise/server/content/ContentManagerRemote</className>
    <differenceType>7012</differenceType>  <!-- method added to an interface -->
    <method>void uploadContentFragment(java.lang.String, byte[], int, int)</method>
    <justification>Adding a method to a remote API interface is safe. This is newly implemented functionality.</justification>
  </difference>

  <difference>
    <className>org/rhq/enterprise/server/content/ContentManagerRemote</className>
    <differenceType>7012</differenceType>  <!-- method added to an interface -->
    <method>org.rhq.core.domain.content.PackageVersion createPackageVersionWithDisplayVersion(org.rhq.core.domain.auth.Subject, java.lang.String, int, java.lang.String, java.lang.String, java.lang.Integer, java.lang.String)</method>
    <justification>Adding a method to a remote API interface is safe. This is newly implemented functionality.</justification>
  </difference>

  <difference>
    <className>org/rhq/enterprise/server/measurement/MeasurementDataManagerRemote</className>
    <differenceType>7006</differenceType>  <!-- method return type changed -->
    <method>org.rhq.core.domain.measurement.MeasurementAggregate getAggregate(org.rhq.core.domain.auth.Subject, int, long, long)</method>
    <to>org.rhq.enterprise.server.measurement.MeasurementAggregate</to>
    <justification>In RHQ 4.8 the MeasurementAggregate class was moved from server jar module to core domain module. This change is not backward compatible with Java clients using the remote EJB API. The breaking change was introduced by commit 2f6e74080e2299 the backward compatible change was introduced by c2a609f48d5f36.</justification>
  </difference>

  <difference>
    <className>org/rhq/enterprise/server/measurement/MeasurementDataManagerRemote</className>
    <differenceType>7012</differenceType>  <!-- method added to an interface -->
    <method>org.rhq.core.domain.measurement.MeasurementAggregate getMeasurementAggregate(org.rhq.core.domain.auth.Subject, int, long, long)</method>
    <justification>Adding a method to a remote API interface is safe. This is method is added in order to deprecate the getAggregate. For more details see the previous intentional change.</justification>
  </difference>

  <difference>
    <className>org/rhq/enterprise/server/operation/OperationManagerRemote</className>
    <differenceType>7006</differenceType>  <!-- method return type changed -->
    <method>org.rhq.core.domain.util.PageList findOperationDefinitionsByCriteria(org.rhq.core.domain.auth.Subject, org.rhq.core.domain.criteria.OperationDefinitionCriteria)</method>
    <to>java.util.List</to>
    <justification> While this is technically a welcome change (because impl  of that method returned the PageList anyway), it breaks the strongly typed clients, because the methods are linked by their full signature and hence a library compiled against JON312GA version of that remote will fail to find the method with the new signature and will fail with NoSuchMethodError at runtime.</justification>
  </difference>

  <difference>
    <className>org/rhq/enterprise/server/bundle/BundleManagerRemote</className>
    <differenceType>7012</differenceType>  <!-- method added to an interface -->
    <method>org.rhq.core.domain.bundle.BundleVersion createBundleVersionViaContentHandle(org.rhq.core.domain.auth.Subject, java.lang.String)</method>
    <justification>Adding a method to a remote API interface is safe.</justification>
  </difference>

  <difference>
    <className>org/rhq/enterprise/server/resource/ResourceFactoryManagerRemote</className>
    <differenceType>7012</differenceType>  <!-- method added to an interface -->
    <method>org.rhq.core.domain.resource.CreateResourceHistory createPackageBackedResourceViaContentHandle(org.rhq.core.domain.auth.Subject, int, int, java.lang.String, org.rhq.core.domain.configuration.Configuration, java.lang.String, java.lang.String, java.lang.Integer, org.rhq.core.domain.configuration.Configuration, java.lang.String, java.lang.Integer)</method>
    <justification>Adding a method to a remote API interface is safe.</justification>
  </difference>

  <difference>
    <className>org/rhq/enterprise/server/configuration/ConfigurationManagerRemote</className>
    <differenceType>7012</differenceType>  <!-- method added to an interface -->
    <method>org.rhq.core.domain.util.PageList findGroupPluginConfigurationUpdatesByCriteria(org.rhq.core.domain.auth.Subject, org.rhq.core.domain.criteria.GroupPluginConfigurationUpdateCriteria)</method>
    <justification>Adding a method to a remote API interface is safe.</justification>
  </difference>

  <difference>
    <className>org/rhq/enterprise/server/configuration/ConfigurationManagerRemote</className>
    <differenceType>7012</differenceType>  <!-- method added to an interface -->
    <method>org.rhq.core.domain.util.PageList findGroupResourceConfigurationUpdatesByCriteria(org.rhq.core.domain.auth.Subject, org.rhq.core.domain.criteria.GroupResourceConfigurationUpdateCriteria)</method>
    <justification>Adding a method to a remote API interface is safe.</justification>
  </difference>

  <difference>
    <className>org/rhq/enterprise/server/bundle/BundleManagerRemote</className>
    <differenceType>7012</differenceType>  <!-- method added to an interface -->
    <method>org.rhq.core.domain.bundle.BundleVersion createInitialBundleVersionViaContentHandle(org.rhq.core.domain.auth.Subject, int[], java.lang.String)</method>
    <justification>Adding a method to a remote API interface is safe.</justification>
  </difference>

  <difference>
    <className>org/rhq/enterprise/server/configuration/ConfigurationManagerRemote</className>
    <differenceType>7012</differenceType>  <!-- method added to an interface -->
    <method>int scheduleGroupPluginConfigurationUpdate(org.rhq.core.domain.auth.Subject, int, java.util.Map)</method>
    <justification>Adding a method to a remote API interface is safe.</justification>
  </difference>

  <difference>
    <className>org/rhq/enterprise/server/operation/OperationManagerRemote</className>
    <differenceType>7012</differenceType>  <!-- method added to an interface -->
    <method>void deleteOperationHistories(org.rhq.core.domain.auth.Subject, int[], boolean)</method>
    <justification>Adding a method to a remote API interface is safe. This is newly implemented functionality.</justification>
  </difference>

  <difference>
    <className>org/rhq/enterprise/server/measurement/CallTimeDataManagerRemote</className>
    <differenceType>7012</differenceType>  <!-- method added to an interface -->
    <method>org.rhq.core.domain.util.PageList findCallTimeDataRawForResource(org.rhq.core.domain.auth.Subject, int, long, long, org.rhq.core.domain.util.PageControl)</method>
    <justification>Adding a method to a remote API interface is safe. This is newly implemented functionality.</justification>
  </difference>

</differences>
