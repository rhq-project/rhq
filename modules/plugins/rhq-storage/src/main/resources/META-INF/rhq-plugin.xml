<plugin
  name="RHQStorage"
  displayName="RHQ Storage"
  package="org.rhq.plugins.storage"
  description="Monitoring of RHQ Storage features and performance"
  xmlns="urn:xmlns:rhq-plugin"
  xmlns:c="urn:xmlns:rhq-configuration">

  <depends plugin="Cassandra" useClasses="true" />

  <server
    name="RHQ Storage Node"
    discovery="StorageNodeDiscoveryComponent"
    class="StorageNodeComponent"
    description="RHQ Storage Node">

    <plugin-configuration>
      <c:simple-property name="connectorAddress" displayName="Manager URL" default="service:jmx:rmi:///jndi/rmi://127.0.0.1:7399/jmxrmi"
                         description="The RMI URL with which to connect to the RHQ Storage Node (e.g. service:jmx:rmi:///jndi/rmi://127.0.0.1:7399/jmxrmi)."/>
      <c:simple-property name="type" readOnly="true" default="org.mc4j.ems.connection.support.metadata.J2SE5ConnectionTypeDescriptor"
                         description="The type used to establish the EMS connection to the RHQ Storage Node."/>
      <c:simple-property name="baseDir" displayName="Base Directory" description="The base directory from which the Cassandra Daemon was launched." required="false"/>
      <c:simple-property name="yamlConfiguration" displayName="YAML Configuration File" description="YAML Configuration File"/>
      <c:simple-property name="jmxPort" description="The JMX port for the RHQ Storage Node" default="7299" type="integer" readOnly="true"/>
      <c:simple-property name="host" description="The host on which the RHQ Storage Node listens to CQL client connections" default="localhost"/>
      <c:simple-property name="clusterName" description="Cluster name" default="localhost"/>
      <c:simple-property name="commandLine" required="false" type="string" description="the command line of the JVM at the time it was discovered - only used by JVMs with type Local; if the command line of the JVM changes, this property's value will need to be updated accordingly in order for RHQ to connect to the JVM"/>
    </plugin-configuration>

    <process-scan name="CassandraDaemon" query="process|basename|match=^java.*,arg|org.apache.cassandra.service.CassandraDaemon|match=.*"/>

    <operation name="shutdown" description="Shuts down the Cassandra daemon">
      <results>
        <c:simple-property name="shutdownResult" description="Shutdown the Cassandra daemon"/>
      </results>
    </operation>

    <operation name="start" description="Starts the Cassandra daemon">
      <results>
        <c:simple-property name="startResult" description="Start the Cassandra daemon"/>
      </results>
    </operation>
    <operation name="restart" description="Restarts the Cassandra daemon">
      <results>
        <c:simple-property name="startResult" description="Restart the Cassandra daemon"/>
      </results>
    </operation>

    <operation name="decommission" description="Take the storage node out of service. This operation is NOT intended for
      direct usage. It is part of the undeployment process. Please see the storage node (un)deployment documentation for
      more information."/>

    <operation name="uninstall" description="Removes all of the storage node files from disk. This operation is NOT
      intended for direct usage. It is part of the undeployment process. Please see the storage node (un)deployment
      documentation for more information."/>

    <operation name="repair" description="Runs anti-entropy repair on the primary range of rhq and system_auth keyspaces">
      <results>
        <c:list-property name="results">
          <c:map-property name="resultsMap">
          <c:simple-property name="task" type="string"/>
          <c:simple-property name="succeeded" type="boolean"/>
          <c:simple-property name="details" type="string"/>
        </c:map-property>
        </c:list-property>
      </results>
    </operation>

    <operation name="addNodeMaintenance" description="This operation is NOT intended for direct usage. It is part of the
      deployment process. Please see the storage node deployment documentation for more information.">
      <parameters>
        <c:simple-property name="runRepair" type="boolean" default="true"/>
        <c:simple-property name="updateSeedsList" type="boolean" default="true"/>
        <c:simple-property name="newNodeAddress" type="string" required="true"/>
        <c:list-property name="seedsList">
          <c:simple-property name="seed" type="string"/>
        </c:list-property>
      </parameters>
      <results>
        <c:list-property name="results">
          <c:map-property name="resultsMap">
            <c:simple-property name="task" type="string"/>
            <c:simple-property name="succeeded" type="boolean"/>
            <c:simple-property name="details" type="string"/>
          </c:map-property>
        </c:list-property>
      </results>
    </operation>

    <operation name="removeNodeMaintenance" description="This operation is NOT intended for direct usage. It is part of
      the undeployment process. Please see the storage node (un)deployment documentation for more information.">
      <parameters>
        <c:simple-property name="runRepair" type="boolean" default="true"/>
        <c:simple-property name="updateSeedsList" type="boolean" default="true"/>
        <c:simple-property name="removedNodeAddress" type="string" required="true"/>
        <c:list-property name="seedsList">
          <c:simple-property name="seed" type="string"/>
        </c:list-property>
      </parameters>
      <results>
        <c:list-property name="results">
          <c:map-property name="resultsMap">
            <c:simple-property name="task" type="string"/>
            <c:simple-property name="succeeded" type="boolean"/>
            <c:simple-property name="details" type="string"/>
          </c:map-property>
        </c:list-property>
      </results>
    </operation>

    <operation name="announce" description="This operation is NOT intended for direct usage. It is part of the
      deployment process. Please see the storage node deployment documentation for more information.">
      <parameters>
        <c:list-property name="addresses">
          <c:simple-property name="address"/>
        </c:list-property>
      </parameters>
      <results>
        <c:simple-property name="details"/>
      </results>
    </operation>

    <operation name="unannounce" description="This operation is NOT intended for direct usage. It is part of
      the undeployment process. Please see the storage node (un)deployment documentation for more information.">
      <parameters>
        <c:list-property name="addresses">
          <c:simple-property name="address"/>
        </c:list-property>
      </parameters>
      <results>
        <c:simple-property name="details"/>
      </results>
    </operation>

    <operation name="prepareForBootstrap" description="This operation is NOT intended for direct usage. It is part of the
      deployment process. Please see the storage node deployment documentation for more information.">
      <parameters>
        <c:simple-property name="cqlPort" type="integer" displayName="CQL Port"/>
        <c:simple-property name="gossipPort" type="integer"/>
        <c:list-property name="addresses" displayName="Storage Node IP Addresses">
          <c:simple-property name="address"/>
        </c:list-property>
      </parameters>
      <results>
          <c:simple-property name="operationResult"/>
      </results>
    </operation>

    <operation name="prepareForUpgrade" description="Prepares the storage node for upgrade (this operation consists of following steps: 1) turning off the RPC server, 2) turning off the gossiper, 3) taking the snapshot (backuping the data), 4) invoking the drain operation">
        <parameters>
          <c:simple-property name="snapshotName" required="false" type="string" displayName="Snapshot Name"
                             description="Snapshot name. If left empty current system time in milliseconds will be used as the snapshot name."/>
        </parameters>
        <results>
          <c:simple-property name="prepareForUpgradeResult" description="Prepares the storage node for upgrade (this operation consists of following steps: 1) turning off the RPC server, 2) turning off the gossiper, 3) taking the snapshot (backuping the data), 4) invoking the drain operation"/>
        </results>
    </operation>

    <operation name="updateSeedsList" description="Updatess the node's seeds property in cassandra.yaml">
      <parameters>
        <c:list-property name="seedsList">
          <c:simple-property name="seed" type="string"/>
        </c:list-property>
      </parameters>
    </operation>

    <operation name="moveDataFiles" description="Move StorageNode datafiles to a new location">
      <parameters>
        <c:simple-property name="CommitLogLocation" description="Location of the commit log directory" required="false" type="string" />
        <c:simple-property name="SavedCachesLocation" description="Location of the saved caches directory" required="false" type="string" />
        <c:list-property name="AllDataFileLocations" displayName="Data File Locations" description="List of data file locations">
          <c:simple-property name="directory" type="string" />
        </c:list-property>
      </parameters>
      <results>
        <c:simple-property name="operationResult" description="Outcome of updating the configuration."/>
      </results>
    </operation>

    <operation name="takeSnapshot"
               description="Takes a snapshot of all keyspaces. A snapshot first flushes all in-memory writes to disk and then creates a hard
               link of each SSTable file for the keyspace. Note that a column family can have multiple
               SSTables on disk. By default snapshots are stored in the &lt;cassandra_data_dir&gt;/&lt;keyspace_name&gt;/&lt;column_family_name&gt;/snapshots
               directory. On Linux/UNIX systems cassandra_data_dir defaults to /var/lib/cassandra/data">
      <parameters>
        <c:simple-property name="snapshotName" required="false" type="string" displayName="Snapshot Name" description="Snapshot name. If left empty current system time in milliseconds will be used as the snapshot name."/>
        <c:simple-property name="retentionStrategy" required="true" type="string" default="Keep All" description="Retention Strategy defines what happens to snapshots after being created. Default is Keep All - nothing is cleaned up, Deletion Strategy is ignored. Keep Last N - newest N snaphosts remain, the rest of snapshots is cleaned up based on Deletion Strategy, N has to be specified using 'count' property. Delete Older Than N days - delete snapshots older than N days, rest of snapshots is cleaned up based on Deletion Strategy, N has to be specified using 'count' property">
          <c:property-options>
            <c:option value="Keep All"/>
            <c:option value="Keep Last N"/>
            <c:option value="Delete Older Than N days"/>
          </c:property-options>
        </c:simple-property>
        <c:simple-property name="count" required="false" type="integer" description="Additional parameter to Retention Strategy, stands for N" />
        <c:simple-property name="deletionStrategy" required="true" type="string" default="Delete" description="Deletion Strategy defines what happens to snapshots that don't match Retention Strategy. Default is Delete - snapshots will be deleted. Move - snapshots are moved to location specified by 'location' property.">
          <c:property-options>
            <c:option value="Delete"/>
            <c:option value="Move"/>
          </c:property-options>
        </c:simple-property>
        <c:simple-property name="location" required="false" type="string" description="Additional parameter to Deletion Strategy, specifies location to move snaphosts to." />
      </parameters>
      <results>
        <c:simple-property name="operationResult" description="Result"/>
      </results>
    </operation>

    <operation name="updateConfiguration" description="Updates the node configuration. Will require a separate server restart for the settings to take effect.">
      <parameters>
        <c:simple-property name="jmxPort" type="integer" required="false" description="JMX port JVM option."/>
        <c:simple-property name="heapSize" type="string" required="false" description="The heap size to be used for both -Xms and -Xmx JVM options."/>
        <c:simple-property name="heapNewSize" type="string" required="false" description="The heap new size to be used be used with -Xmn JVM option."/>
        <c:simple-property name="threadStackSize" type="integer" required="false" description="The thread stack size. This memory is allocated to each thread off heap. The
                                                                                value should be an integer that will be interpreted in kilobytes."/>
        <c:simple-property name="restartIfRequired" type="boolean" required="true" default="false" description="If [true] then restart the server at the end of the update if and if only the updates made require a restart. If [false] the server will not be restarted regardless of the updates made."/>
      </parameters>
      <results>
        <c:simple-property name="operationResult" description="Outcome of updating the configuration."/>
      </results>
    </operation>

    <resource-configuration>
      <c:group name="MemorySettings">
        <c:simple-property name="minHeapSize"
                           readOnly="true"
                           description="The minimum heap size. This value will be used with the -Xms JVM option. This
                           is read only because it is automatically set to the same value as Max Heap Size."/>
        <c:simple-property name="maxHeapSize"
                           description="The maximum heap size. This value will be used with the -Xmx JVM option. The
                           value should be an integer with a suffix of M or G to indicate megabytes or gigabytes.">
          <c:constraint>
            <c:regex-constraint expression="\d+[mMgG]"/>
          </c:constraint>
        </c:simple-property>
        <c:simple-property name="heapNewSize"
                           description="The size of the new generation portion of the heap. This value will be used with
                           the -Xmn JVM option. The value should be an integer with a suffix of M or G to indicate
                           megabytes or gigabytes.">
          <c:constraint>
            <c:regex-constraint expression="\d+[mMgG]"/>
          </c:constraint>
        </c:simple-property>
        <c:simple-property name="threadStackSize"
                           type="integer"
                           description="The thread stack size. This memory is allocated to each thread off heap. The
                           value should be an integer that will be interpreted in kilobytes."/>
        <c:simple-property name="heapDumpOnOOMError" displayName="Heap Dump on OutOfMemoryError" type="boolean"
                           default="true"
                           description="Generate a heap dump when an OutOfMemoryError occurs"/>
        <c:simple-property name="heapDumpDir" displayName="Heap Dump Directory" required="false"
                           description="The directory in which heap dumps will be written."/>
      </c:group>
      <c:group name="Ports">
        <c:simple-property name="cqlPort"
                           displayName="CQL Port"
                           type="integer"
                           description="The port on which to listen for client requests over the native, CQL protocol.
                           This is a shared, cluster-wide setting."/>
        <c:simple-property name="gossipPort"
                           type="integer"
                           description="The port used for internode communication. This is a shared, cluster-wide setting."/>

      </c:group>
      <c:group name="DataFileLocations">
        <c:simple-property name="CommitLogLocation" description="Location of the commit log directory" required="false" type="string" />
        <c:simple-property name="SavedCachesLocation" description="Location of the saved caches directory" required="false" type="string" />
        <c:list-property name="AllDataFileLocations" displayName="Data File Locations" description="List of data file locations">
          <c:simple-property name="directory" type="string" />
        </c:list-property>
      </c:group>
    </resource-configuration>

    <server name="Cassandra Server JVM"
            sourcePlugin="JMX" sourceType="JMX Server"
            discovery="JvmServerDiscoveryComponent"
            class="org.rhq.plugins.jmx.EmbeddedJMXServerComponent"
            description="The JVM of the Storage node"
            singleton="true">

      <plugin-configuration>
        <c:simple-property name="type" type="string" default="PARENT" readOnly="true" description="The EMS connection type for this JVM (cannot be modified)"/>
      </plugin-configuration>
    </server>

    <service name="StorageProxy" sourcePlugin="Cassandra" sourceType="StorageProxy" singleton="true"/>

    <service name="StorageService" sourcePlugin="Cassandra" sourceType="StorageService" singleton="true"/>

    <service name="CommitLog" sourcePlugin="Cassandra" sourceType="CommitLog" singleton="true"/>

    <service name="ReadTimeouts" sourcePlugin="Cassandra" sourceType="ReadTimeouts" singleton="true"/>

    <service name="ReadUnavailables" sourcePlugin="Cassandra" sourceType="ReadUnavailables" singleton="true"/>

    <service name="WriteTimeouts" sourcePlugin="Cassandra" sourceType="WriteTimeouts" singleton="true"/>

    <service name="WriteUnavailables" sourcePlugin="Cassandra" sourceType="WriteUnavailables" singleton="true"/>

    <service name="CompactionManager" sourcePlugin="Cassandra" sourceType="CompactionManager" singleton="true"/>

    <service name="CacheService" sourcePlugin="Cassandra" sourceType="CacheService" singleton="true"/>

    <service name="ConfigurableStages" sourcePlugin="Cassandra" sourceType="ConfigurableStages" singleton="true"/>

    <service name="EnabledStages" sourcePlugin="Cassandra" sourceType="EnabledStages" singleton="true"/>

    <service name="ConfigurableInternalServerMetrics" sourcePlugin="Cassandra" sourceType="ConfigurableInternalServerMetrics"
             supportsMissingAvailabilityType="true"
             singleton="true"/>

    <service name="EnabledInternalServerMetrics" sourcePlugin="Cassandra" sourceType="EnabledInternalServerMetrics"
             singleton="true"/>

    <service name="FailureDetector" sourcePlugin="Cassandra" sourceType="FailureDetector" singleton="true"/>

    <service name="Gossiper" sourcePlugin="Cassandra" sourceType="Gossiper" singleton="true"/>

    <service name="StreamingService" sourcePlugin="Cassandra" sourceType="StreamingService" singleton="true"/>

    <service name="MessagingService" sourcePlugin="Cassandra" sourceType="MessagingService" singleton="true"/>

    <service name="Keyspace"
             discovery="org.rhq.plugins.cassandra.KeyspaceDiscoveryComponent"
             class="org.rhq.plugins.cassandra.KeyspaceComponent">

      <operation name="repair" displayName="Repair Keyspace"
                 description="Cassandra compares data on this node with the versions on other replicas to update any
                  out of sync copies of the data. This should be run infrequently as it is a disk IO and CPU intensive
                  operation. All data for each column that is being repaired is read. Unless you are not performing any
                  deletes, it is important to run regularly scheduled repairs to ensure that deleted data gets purged.
                  The frequency that this should be run should be less than the gc_grace_period for each column family.
                  This runs a repair on all column families in this keyspace." />
      <operation name="repairPrimaryRange" description="Runs repair over all column families but only for the node's
                primary range."/>
      <operation name="cleanup" displayName="Clean Keyspace"
                 description="Goes through each SSTable file on disk fore each column family and removes keys
                 (i.e., rows) that the node does not own. This should be performed as a routine maintenance task on
                 existing nodes when new nodes are added to the cluster."/>
      <operation name="compact" displayName="Compact Keyspace"
                 description="Forces major compaction of the keyspace. Though major compaction can free disk space
                  used during runtime it temporarily doubles disk space usage and is I/O and CPU intensive. Once you
                  run a major compaction, automatic minor compactions are no longer triggered frequently forcing you to
                  manually run major compactions on a routine basis. So while read performance will be good immediately
                  following a major compaction, it will continually degrade until the next major compaction is manually invoked."/>
      <operation name="takeSnapshot"
                 description="Takes a snapshot of this keyspaces. A snapshot first flushes all in-memory writes to disk and then creates a hard
                  link of each SSTable file for the keyspace. Note that a column family can have multiple
                  SSTables on disk. By default snapshots are stored in the &lt;cassandra_data_dir&gt;/&lt;keyspace_name&gt;/&lt;column_family_name&gt;/snapshots
                  directory. On Linux/UNIX systems cassandra_data_dir defaults to /var/lib/cassandra/data">
        <parameters>
          <c:simple-property name="snapshotName" required="false" type="string" displayName="Snapshot Name"
                             description="Snapshot name. If left empty current system time in milliseconds will be used as the snapshot name."/>
        </parameters>
      </operation>

      <resource-configuration>
        <c:simple-property name="name" type="string" description="The keyspace name" readOnly="true"/>
        <c:list-property name="keyspaceFileLocations" readOnly="true" description="List of data file locations">
          <c:simple-property name="directory" type="string" readOnly="true"/>
        </c:list-property>
      </resource-configuration>

      <service name="ColumnFamily"
               discovery="org.rhq.plugins.cassandra.ColumnFamilyDiscoveryComponent"
               class="org.rhq.plugins.storage.RhqColumnFamilyComponent">

        <plugin-configuration>
          <c:simple-property name="objectName" readOnly="true" default="org.apache.cassandra.db:type=ColumnFamilies,*"/>
          <c:simple-property name="name" type="string" description="The column family name"/>
        </plugin-configuration>

        <operation name="repair" displayName="Repair Column Family"
                   description="Cassandra compares data on this node with the versions on other replicas to update any
                    out of sync copies of the data. This should be run infrequently as it is a disk IO and CPU intensive
                    operation. All data for each column that is being repaired is read. Unless you are not performing any
                    deletes, it is important to run regularly scheduled repairs to ensure that deleted data gets purged.
                    The frequency that this should be run should be less than the gc_grace_period for the column family." />
        <operation name="compact" displayName="Force Major Column Family Compaction"
                   description="Forces major compaction of this column family. Though major compaction can free disk space
                    used during runtime it temporarily doubles disk space usage and is I/O and CPU intensive. Once you
                    run a major compaction, automatic minor compactions are no longer triggered frequently forcing you to
                    manually run major compactions on a routine basis. So while read performance will be good immediately
                    following a major compaction, it will continually degrade until the next major compaction is manually invoked."/>
        <operation name="takeSnapshot"
                   description="Takes a snapshot of this keyspaces. A snapshot first flushes all in-memory writes to disk and then creates a hard
                    link of each SSTable file for the keyspace. Note that a column family can have multiple
                    SSTables on disk. By default snapshots are stored in the &lt;cassandra_data_dir&gt;/&lt;keyspace_name&gt;/&lt;column_family_name&gt;/snapshots
                    directory. On Linux/UNIX systems cassandra_data_dir defaults to /var/lib/cassandra/data">
          <parameters>
            <c:simple-property name="snapshotName" required="false" type="string" displayName="Snapshot Name"
                               description="Snapshot name. If left empty current system time in milliseconds will be used as the snapshot name."/>
          </parameters>
        </operation>
        <operation name="disableAutoCompaction"
                   description="Disable automatic compaction. Once you disable compaction, automatic minor compactions are no longer triggered frequently forcing you to
                    manually run major compactions on a routine basis."/>
        <operation name="estimateKeys" description="Estimate keys">
          <results>
            <c:simple-property name="operationResult" description="Estimated Keys"/>
          </results>
        </operation>
        <operation name="getSSTablesForKey" displayName="Get SSTables For Key" description="Returns a list of filenames that contain the given key on this node.">
          <parameters>
            <c:simple-property name="p1" displayName="Key" required="true" type="string" description="Key"/>
          </parameters>
          <results>
            <c:simple-property name="operationResult" description="Filenames that contain the given key on this node."/>
          </results>
        </operation>
        <operation name="restoreSnapshot" description="Restore the column family from a previously taken snapshot.">
          <parameters>
            <c:simple-property name="snapshotName" required="true" type="string" description="Snapshot Name">
              <c:option-source target="configuration" expression="snapshots/snapshot=name:self"/>
            </c:simple-property>
          </parameters>
          <results>
            <c:simple-property name="operationResult" description="Filenames that contain the given key on this node."/>
          </results>
        </operation>

        <metric property="BloomFilterDiskSpaceUsed" measurementType="dynamic" displayType="summary" description="Bloom Filter Disk Space Used"/>
        <metric property="BloomFilterFalsePositives" measurementType="dynamic" displayType="summary" description="Bloom Filter False Positives"/>
        <metric property="BloomFilterFalseRatio" measurementType="dynamic" displayType="summary" description="Bloom Filter False Ratio"/>
        <metric property="CompressionRatio" measurementType="dynamic" displayType="summary" description="Compression Ratio"/>
        <metric property="DroppableTombstoneRatio" measurementType="dynamic" displayType="summary" description="Compression Ratio"/>
        <metric property="LiveDiskSpaceUsed" displayName="Live Disk Space Used" measurementType="dynamic" displayType="summary" description="Disk space used by SSTables belonging to this CF"/>
        <metric property="LiveSSTableCount" displayName="Live SS Table Count" measurementType="dynamic" displayType="summary" description="Number of SSTables on disk for this CF"/>
        <metric property="MaxRowSize" measurementType="dynamic" displayType="summary" description="Size of the largest compacted row"/>
        <metric property="MeanRowSize" measurementType="dynamic" displayType="summary" description="Means size of the compacted rows"/>
        <metric property="MemtableColumnsCount" displayName="Memtable Columns Count" measurementType="dynamic" displayType="summary" description="Total number of columns present in the memtable."/>
        <metric property="MemtableDataSize" displayName="Memtable Data Size" measurementType="dynamic" displayType="detail" description="Total amount of data stored in the memtable, including column related overhead."/>
        <metric property="MemtableSwitchCount" displayName="Memtable Switch Count" measurementType="dynamic" displayType="summary" description="Number of times that a flush has resulted in the memtable being switched out."/>
        <metric property="MinRowSize" measurementType="dynamic" displayType="summary" description="Size of the smallest compacted row"/>
        <metric property="PendingTasks" measurementType="dynamic" displayType="summary" description="Estimated number of tasks pending for this column family"/>
        <metric property="ReadCount" displayName="Read Count"  measurementType="trendsup" displayType="summary" description="Number of read operations since execution start"/>
        <metric property="RecentBloomFilterFalsePositives" measurementType="dynamic" displayType="summary" description="Recent Bloom Filter False Positives"/>
        <metric property="RecentBloomFilterFalseRatio" measurementType="dynamic" displayType="summary" description="Recent Bloom Filter False Ratio"/>
        <metric property="RecentReadLatencyMicros" displayName="Recent Read Latency (in micro seconds)" measurementType="trendsup" displayType="detail" description="Latency of read operations since this metric was last sampled"/>
        <metric property="RecentWriteLatencyMicros" displayName="Recent Write Latency (in micro seconds)" measurementType="trendsup" displayType="detail" description="Latency of write operations since this metric was last sampled"/>
        <metric property="TotalDiskSpaceUsed" measurementType="dynamic" displayType="detail" description="Total disk space used by SSTables belonging to this CF, including obsolete ones waiting to be GC'd"/>
        <metric property="TotalReadLatencyMicros" displayName="Total Read Latency (in micro seconds)" measurementType="trendsup" displayType="detail" description="Latency of read operations since execution start"/>
        <metric property="TotalWriteLatencyMicros" displayName="Total Write Latency (in micro seconds)" measurementType="trendsup" displayType="detail" description="Latency of write operations since execution start"/>
        <metric property="UnleveledSSTables" measurementType="dynamic" displayType="summary" description="Number of SSTables in L0. Always return 0 if Leveled compaction is not enabled."/>
        <metric property="WriteCount" displayName="Write Count" measurementType="trendsup" displayType="summary" description="Number of write operations since execution start"/>

        <resource-configuration>
          <c:simple-property name="CompactionStrategyClass" type="string" required="true" description="Compaction strategy class name."/>
          <c:simple-property name="CompressionParameters" type="string" readOnly="true" description="Compression parameters"/>
          <c:simple-property name="MinimumCompactionThreshold" type="integer" required="true" description="Minimum number of sstables in queue before compaction kicks off."/>
          <c:simple-property name="MaximumCompactionThreshold" type="integer" required="true" description="Maximum number of sstables in queue before compaction kicks off."/>
          <c:list-property name="snapshots" readOnly="true" required="false">
            <c:map-property name="snapshot" readOnly="true">
              <c:simple-property name="name" readOnly="true"/>
              <c:simple-property name="folder" readOnly="true" description="Snapshot Folder"/>
            </c:map-property>
          </c:list-property>
        </resource-configuration>
      </service>
    </service>
  </server>
</plugin>

